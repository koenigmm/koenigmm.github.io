/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm0A = JSIL.DeclareAssembly("Fusee.Tutorial.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Tutorial");
JSIL.DeclareNamespace("Fusee.Tutorial.Core");
/* class Fusee.Tutorial.Core.HierarchyInput */ 

(function HierarchyInput$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.Fusee.Serialization.TransformComponent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.Fusee.Serialization.SceneContainer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.System.Collections.Generic.List$b1.Of($asm08.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.System.Collections.Generic.List$b1.Of($asm08.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.Fusee.Serialization.MatChannelContainer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.Fusee.Serialization.SpecularChannelContainer)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Fusee.Tutorial.Core.SimpleMeshes)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.Fusee.Math.Core.float4)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0E.System.Single)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.KeyboardDevice)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0E.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.Fusee.Math.Core.float4x4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm0E.TypeRef("System.Single"), $asm0E.TypeRef("System.Single"), 
        $asm0E.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm08.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm08.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float4"), [
        $asm0E.TypeRef("System.Single"), $asm0E.TypeRef("System.Single"), 
        $asm0E.TypeRef("System.Single"), $asm0E.TypeRef("System.Single")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"), [$asm08.TypeRef("Fusee.Serialization.SceneContainer")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float4x4"), [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };


  function HierarchyInput__ctor () {
    this._camAngle = 0;
    $T00().prototype._ctor.call(this);
  }; 

  function HierarchyInput_CreateScene () {
    var expr_07 = new ($T01())();
    expr_07.Rotation = $S00().Construct(0, 0, 0);
    expr_07.Scale = $S00().Construct(1, 1, 1);
    expr_07.Translation = $S00().Construct(0, 0, 0);
    this._baseTransform = expr_07;
    var expr_60 = new ($T01())();
    expr_60.Rotation = $S00().Construct(0, 1.2, 0);
    expr_60.Scale = $S00().Construct(1, 1, 1);
    expr_60.Translation = $S00().Construct(0, 6, 0);
    this._bodyTransform = expr_60;
    var expr_B9 = new ($T01())();
    expr_B9.Rotation = $S00().Construct(0.8, 0, 0);
    expr_B9.Scale = $S00().Construct(1, 1, 1);
    expr_B9.Translation = $S00().Construct(2, 4, 0);
    this._upperArmTransform = expr_B9;
    var expr_112 = new ($T01())();
    expr_112.Rotation = $S00().Construct(0.8, 0, 0);
    expr_112.Scale = $S00().Construct(1, 1, 1);
    expr_112.Translation = $S00().Construct(-2, 8, 0);
    this._foreArmTransform = expr_112;
    var expr_16A = new ($T03())();
    var expr_170 = $S01().Construct();
    var expr_176 = new ($T05())();
    var expr_17C = $S02().Construct();
    $S03().CallVirtual("Add", null, expr_17C, this._baseTransform);
    var expr_18F = new ($T07())();
    var expr_195 = new ($T08())();
    expr_195.Color = $S00().Construct(0.7, 0.7, 0.7);
    expr_18F.Diffuse = expr_195;
    var expr_1BA = new ($T09())();
    expr_1BA.Color = $S00().Construct(1, 1, 1);
    expr_1BA.Shininess = 5;
    expr_18F.Specular = expr_1BA;
    $S03().CallVirtual("Add", null, expr_17C, expr_18F);
    $S03().CallVirtual("Add", null, expr_17C, $T0A().CreateCuboid($S00().Construct(10, 2, 10)));
    expr_176.Components = expr_17C;
    $S04().CallVirtual("Add", null, expr_170, expr_176);
    var expr_21B = new ($T05())();
    var expr_221 = $S02().Construct();
    $S03().CallVirtual("Add", null, expr_221, this._bodyTransform);
    var expr_234 = new ($T07())();
    var expr_23A = new ($T08())();
    expr_23A.Color = $S00().Construct(1, 0, 0);
    expr_234.Diffuse = expr_23A;
    var expr_25F = new ($T09())();
    expr_25F.Color = $S00().Construct(1, 1, 1);
    expr_25F.Shininess = 5;
    expr_234.Specular = expr_25F;
    $S03().CallVirtual("Add", null, expr_221, expr_234);
    $S03().CallVirtual("Add", null, expr_221, $T0A().CreateCuboid($S00().Construct(2, 10, 2)));
    expr_21B.Components = expr_221;
    var expr_2BA = $S01().Construct();
    var expr_2C0 = new ($T05())();
    var expr_2C6 = $S02().Construct();
    $S03().CallVirtual("Add", null, expr_2C6, this._upperArmTransform);
    expr_2C0.Components = expr_2C6;
    var expr_2DE = $S01().Construct();
    var expr_2E4 = new ($T05())();
    var expr_2EA = $S02().Construct();
    var expr_2F0 = new ($T01())();
    expr_2F0.Rotation = $S00().Construct(0, 0, 0);
    expr_2F0.Scale = $S00().Construct(1, 1, 1);
    expr_2F0.Translation = $S00().Construct(0, 4, 0);
    $S03().CallVirtual("Add", null, expr_2EA, expr_2F0);
    var expr_34A = new ($T07())();
    var expr_350 = new ($T08())();
    expr_350.Color = $S00().Construct(0, 1, 0);
    expr_34A.Diffuse = expr_350;
    var expr_375 = new ($T09())();
    expr_375.Color = $S00().Construct(1, 1, 1);
    expr_375.Shininess = 5;
    expr_34A.Specular = expr_375;
    $S03().CallVirtual("Add", null, expr_2EA, expr_34A);
    $S03().CallVirtual("Add", null, expr_2EA, $T0A().CreateCuboid($S00().Construct(2, 10, 2)));
    expr_2E4.Components = expr_2EA;
    $S04().CallVirtual("Add", null, expr_2DE, expr_2E4);
    var expr_3D6 = new ($T05())();
    var expr_3DC = $S02().Construct();
    $S03().CallVirtual("Add", null, expr_3DC, this._foreArmTransform);
    expr_3D6.Components = expr_3DC;
    var expr_3F4 = $S01().Construct();
    var expr_3FA = new ($T05())();
    var expr_400 = $S02().Construct();
    var expr_406 = new ($T01())();
    expr_406.Rotation = $S00().Construct(0, 0, 0);
    expr_406.Scale = $S00().Construct(1, 1, 1);
    expr_406.Translation = $S00().Construct(0, 4, 0);
    $S03().CallVirtual("Add", null, expr_400, expr_406);
    var expr_460 = new ($T07())();
    var expr_466 = new ($T08())();
    expr_466.Color = $S00().Construct(0, 0, 1);
    expr_460.Diffuse = expr_466;
    var expr_48B = new ($T09())();
    expr_48B.Color = $S00().Construct(1, 1, 1);
    expr_48B.Shininess = 5;
    expr_460.Specular = expr_48B;
    $S03().CallVirtual("Add", null, expr_400, expr_460);
    $S03().CallVirtual("Add", null, expr_400, $T0A().CreateCuboid($S00().Construct(2, 10, 2)));
    expr_3FA.Components = expr_400;
    $S04().CallVirtual("Add", null, expr_3F4, expr_3FA);
    expr_3D6.Children = expr_3F4;
    $S04().CallVirtual("Add", null, expr_2DE, expr_3D6);
    expr_2C0.Children = expr_2DE;
    $S04().CallVirtual("Add", null, expr_2BA, expr_2C0);
    expr_21B.Children = expr_2BA;
    $S04().CallVirtual("Add", null, expr_170, expr_21B);
    expr_16A.Children = expr_170;
    return expr_16A;
  }; 

  function HierarchyInput_Init () {
    (this.RenderCanvas$RC$value.ClearColor = $S05().Construct(0.8, 0.9, 0.7, 1));
    this._scene = this.CreateScene();
    this._sceneRenderer = $S06().Construct(this._scene);
  }; 

  function HierarchyInput_RenderAFrame () {
    var bodyRot = +this._bodyTransform.Rotation.y;
    bodyRot += (3.1 * +$T0F().get_DeltaTime()) * +$T11().get_Keyboard().get_LeftRightAxis();
    this._bodyTransform.Rotation = $S00().Construct(0, bodyRot, 0);
    var upperArmTransform = +this._upperArmTransform.Rotation.x;
    upperArmTransform += (3.1 * +$T0F().get_DeltaTime()) * +$T11().get_Keyboard().get_UpDownAxis();
    this._upperArmTransform.Rotation = $S00().Construct(upperArmTransform, 0, 0);
    var foreArmTransform = +this._foreArmTransform.Rotation.x;
    foreArmTransform += (3.1 * +$T0F().get_DeltaTime()) * +$T11().get_Keyboard().get_WSAxis();
    this._foreArmTransform.Rotation = $S00().Construct(foreArmTransform, 0, 0);
    (this.RenderCanvas$RC$value).Clear($T12().$Flags("Color", "Depth"));
    var leftButton = $T11().get_Mouse().get_LeftButton();
    if (leftButton) {
      this._camAnglerotationX = +((+$T11().get_Mouse().get_Velocity().x / 5000));
    }
    this._camAngle = +this._camAngle - +this._camAnglerotationX;
    (this.RenderCanvas$RC$value.View = $S07().CallStatic($T15(), "op_Multiply", null, 
        $T15().CreateTranslation(0, -10, 50).MemberwiseClone(), 
        $T15().CreateRotationY(this._camAngle).MemberwiseClone()
      ).MemberwiseClone());
    (this._sceneRenderer).Render(this.RenderCanvas$RC$value);
    this.Present();
  }; 

  function HierarchyInput_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspectRatio = +((+(this.get_Width()) / +(this.get_Height())));
    var projection = $T15().CreatePerspectiveFieldOfView(0.7853982, aspectRatio, 1, 20000);
    (this.RenderCanvas$RC$value.Projection = projection.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Tutorial.Core.HierarchyInput", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      HierarchyInput__ctor
    );

    $.Method({Static:false, Public:false}, "CreateScene", 
      JSIL.MethodSignature.Return($asm08.TypeRef("Fusee.Serialization.SceneContainer")), 
      HierarchyInput_CreateScene
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      HierarchyInput_Init
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      HierarchyInput_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      HierarchyInput_Resize
    );

    $.Field({Static:false, Public:false}, "_scene", $asm08.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sceneRenderer", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_camAngle", $.Single);

    $.Field({Static:false, Public:false}, "_baseTransform", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:false}, "_bodyTransform", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:false}, "_upperArmTransform", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:false}, "_foreArmTransform", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:false}, "_camAnglerotationX", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.SimpleMeshes */ 

(function SimpleMeshes$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0E.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0E.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0E.System.NotImplementedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.Fusee.Serialization.MeshComponent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0E.System.UInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.Fusee.Math.Core.float2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.Fusee.Math.Core.AABBf)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0E.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm0E.TypeRef("System.Single"), $asm0E.TypeRef("System.Single"), 
        $asm0E.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float2"), [$asm0E.TypeRef("System.Single"), $asm0E.TypeRef("System.Single")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$asm0E.TypeRef("System.Single"), $asm07.TypeRef("Fusee.Math.Core.float3")]))) ();
  };


  function SimpleMeshes_CreateCone (radius, height, segments) {
    return $thisType.CreateConeFrustum(radius, 0, height, segments);
  }; 

  function SimpleMeshes_CreateConeFrustum (radiuslower, radiusupper, height, segments) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateCuboid (size) {
    var meshComponent = new ($T04())();
    var expr_0F = JSIL.Array.New($T03(), 24);
    var float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[0] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[1] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[2] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[3] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[4] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[5] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[6] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[7] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[8] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[9] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[10] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[11] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[12] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[13] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[14] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[15] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[16] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[17] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[18] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[19] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[20] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[21] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[22] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[23] = float.MemberwiseClone();
    meshComponent.Vertices = expr_0F;
    meshComponent.Triangles = JSIL.Array.New($T06(), [0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 10, 9, 8, 11, 10, 12, 14, 13, 12, 15, 14, 16, 18, 17, 16, 19, 18, 20, 22, 21, 20, 23, 22]);
    meshComponent.Normals = JSIL.Array.New($T03(), [$S01().Construct(0, 0, 1), $S01().Construct(0, 0, 1), $S01().Construct(0, 0, 1), $S01().Construct(0, 0, 1), $S01().Construct(1, 0, 0), $S01().Construct(1, 0, 0), $S01().Construct(1, 0, 0), $S01().Construct(1, 0, 0), $S01().Construct(0, 0, -1), $S01().Construct(0, 0, -1), $S01().Construct(0, 0, -1), $S01().Construct(0, 0, -1), $S01().Construct(-1, 0, 0), $S01().Construct(-1, 0, 0), $S01().Construct(-1, 0, 0), $S01().Construct(-1, 0, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, -1, 0)]);
    meshComponent.UVs = JSIL.Array.New($T07(), [$S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0)]);
    meshComponent.BoundingBox = new ($T08())($S03().CallStatic($T03(), "op_Multiply", null, -0.5, size.MemberwiseClone()).MemberwiseClone(), $S03().CallStatic($T03(), "op_Multiply", null, 0.5, size.MemberwiseClone()).MemberwiseClone());
    return meshComponent;
  }; 

  function SimpleMeshes_CreateCylinder (radius, height, segments) {
    return $thisType.CreateConeFrustum(radius, radius, height, segments);
  }; 

  function SimpleMeshes_CreatePyramid (baselen, height) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateTetrahedron (edgelen) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateTorus (mainradius, segradius, segments, slices) {
    throw $S00().Construct();
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.SimpleMeshes", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CreateCone", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      SimpleMeshes_CreateCone
    );

    $.Method({Static:true , Public:true }, "CreateConeFrustum", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Single, $.Int32
        ]), 
      SimpleMeshes_CreateConeFrustum
    );

    $.Method({Static:true , Public:true }, "CreateCuboid", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$asm07.TypeRef("Fusee.Math.Core.float3")]), 
      SimpleMeshes_CreateCuboid
    );

    $.Method({Static:true , Public:true }, "CreateCylinder", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      SimpleMeshes_CreateCylinder
    );

    $.Method({Static:true , Public:true }, "CreatePyramid", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$.Single, $.Single]), 
      SimpleMeshes_CreatePyramid
    );

    $.Method({Static:true , Public:true }, "CreateTetrahedron", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$.Single]), 
      SimpleMeshes_CreateTetrahedron
    );

    $.Method({Static:true , Public:true }, "CreateTorus", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32, $.Int32
        ]), 
      SimpleMeshes_CreateTorus
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

